<?xml version="1.0"?>

<!--
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    Copyright (c) 2013, 2014 by Delphix. All rights reserved.
-->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <!-- Display file names in error messages relative to the build's base directory -->
    <property name="basedir" value="${bld.top.dir}"/>

    <!-- Check for copyright headers in all Java files. -->
    <module name="RegexpHeader">
        <property name="id" value="copyrightHeader" />
        <property name="headerFile" value="${ant.checkstyle.config.dir}/java.header"/>
        <message key="header.missing" value="Invalid or missing copyright header." />
        <message key="header.mismatch" value="Invalid or missing copyright header." />
    </module>

    <module name="RegexpMultiline">
	<property name="id" value="multipleBlank" />
	<property name="message" value="Multiple blank lines in a row are disallowed" />
	<!-- one for the last non-blank line, one for the first blank line, one or more for subsequent blank lines. -->
	<property name="format" value="\n{3,}" />
    </module>

    <module name="TreeWalker">

        <!-- Detects direct use of log4j, com.delphix.appliance.logger.Logger should be used instead -->
        <module name="IllegalImport">
            <property name="id" value="log4jUse" />
            <property name="illegalPkgs" value="org.apache.log4j" />
            <message key="import.illegal"
                     value="Importing {0} is not allowed. Use com.delphix.appliance.logger.Logger for logging." />
        </module>

        <module name="IllegalImport">
            <property name="id" value="jUnitUse" />
            <property name="illegalPkgs" value="org.testng.AssertJUnit" />
            <message key="import.illegal"
                     value="Importing {0} is not allowed. Use org.testng.Assert for assertions." />
        </module>

        <!-- Detects improper definition of equals() and hashCode() methods. -->
        <module name="EqualsHashCode">
            <property name="id" value="equalsHashCode" />
            <message key="equals.noHashCode"
                     value="Class overrides equals() without overriding hashCode()." />
        </module>
        <module name="CovariantEquals">
            <property name="id" value="covariantEquals" />
            <message key="covariant.equals" value="Class defines covariant equals() without overriding equals(java.lang.Object)." />
        </module>

        <!-- Detects unnecessary semi-colons. -->
        <module name="EmptyStatement">
            <property name="id" value="emptyStatement" />
            <message key="empty.statement" value="File contains empty statement (stray ';')." />
        </module>

        <!-- Detects multiple statements on a single line. -->
        <module name="OneStatementPerLine">
            <property name="id" value="oneStatement" />
        </module>

        <!-- Detects improper modifier order. -->
        <module name="ModifierOrder">
            <property name="id" value="modifierOrder" />
        </module>

        <!-- Detects overly-complicated boolean logic. -->
        <module name="SimplifyBooleanExpression">
            <property name="id" value="simplifyBoolean" />
            <message key="simplify.expression" value="Expression contains unecessary comparison with literal true/false." />
        </module>
        <module name="SimplifyBooleanReturn">
            <property name="id" value="simplifyBoolean" />
            <message key="simplify.boolreturn" value="Conditional return unecessary, return boolean expression directly." />
        </module>

        <!-- Detects methods which are declared as throwing Throwable/Exception -->
        <!-- An exception is made for the finalize() method and the invoke() method of InvokationHandlers and unit tests -->
        <module name="IllegalThrows">
            <property name="id" value="illegalThrows" />
            <property name="illegalClassNames" value="java.lang.Throwable,java.lang.Exception" />
            <property name="ignoredMethodNames" value="finalize,invoke" />
            <message key="illegal.throw" value="Methods cannot throw {0}, throw a specific exception instead." />
        </module>

        <!-- Detects catching Exception/Throwable/RuntimeException -->
        <module name="IllegalCatch">
            <property name="id" value="illegalCatch" />
        </module>

        <!-- Detects catching DelphixFatalException -->
        <module name="IllegalCatch">
            <property name="id" value="illegalDelphixCatch" />
            <property name="illegalClassNames" value="com.delphix.appliance.server.exception.DelphixFatalException" />
        </module>

        <!-- Detect catch blocks without code or comments. -->
        <module name="EmptyBlock">
            <property name="id" value="ignoreException" />
            <property name="option" value="text" />
            <property name="tokens" value="LITERAL_CATCH" />
            <message key="block.empty" value="catch block cannot be empty, at least add a comment justifying ignoring the Exception." />
        </module>

        <!-- Detects case fallthrough that is not explicitly marked by a comment -->
        <module name="FallThrough">
            <property name="id" value="caseFallThrough" />
            <property name="reliefPattern" value="FALLTHRU" />
        </module>

        <!-- Detects default cases that are not last in a switch statment. -->
        <module name="DefaultComesLast">
            <property name="id" value="defaultLast" />
        </module>

        <!-- Detects extra nested blocks. -->
        <module name="AvoidNestedBlocks">
            <property name="id" value="nestedBlocks" />
            <property name="allowInSwitchCase" value="true" />
        </module>

	<!-- Detects whitespace between method name and following left parenthesis -->
	<module name="MethodParamPad" />

	<module name="RegexpSinglelineJava">
	    <property name="message" value="Whitespace is disallowed at the end of a line" />
	    <property name="format" value="\s+$" />
        </module>

    </module>

    <module name="com.delphix.checkstyle.DelphixAuditListener">
        <property name="styleUrl" value="doc/coding-standard:" />
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${ant.checkstyle.config.dir}/filter-noncompliant.xml" />
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${ant.checkstyle.config.dir}/filter-exceptions.xml" />
    </module>

</module>
